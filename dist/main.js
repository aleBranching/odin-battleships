(()=>{"use strict";function e(e){let t=0;const o=e;return{isSunk:()=>t>=o,hit:()=>{t+=1},_length:o,placed:!1}}function t(){const t=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],o=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],r=[],n=e=>{let t=0;return(o=>{for(let o=0;o<r.length;o++)r[o]===e&&t++})(),t<{1:4,2:3,3:2,4:1}[e]},l=[];return{placeShip:(e,l,c,s)=>{if(l<0||c<0||l>10||c>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let a;if((()=>{const o=(()=>{const t=[];if(s){if(s){let o=l;for(let r=0;r<e;r++)if(t.push([o,c]),o++,o>10)throw new Error("Boat out of game!")}}else{let o=c;for(let r=0;r<e;r++)if(t.push([l,o]),o++,o>10)throw new Error("boat out of game!")}return t})();return!!(()=>{let e=!0;return o.forEach((o=>{const r=o[0],n=o[1];0!==t[n][r]&&(e=!1)})),e})()&&(a=[...o],!0)})()&&n(e)){const n=(e=>{let t;for(let r=0;r<=10;r++)if(null!=o[r]&&o[r]._length===e&&!1===o[r].placed){t=r;break}return t})(e);o[n].placed=!0,r.push(e),a.forEach((e=>{const o=e[0],r=e[1];t[r][o]=n}))}},gameArena:t,receiveAttack:(e,r)=>{if(0!==t[r][e]){const n=t[r][e];o[n].hit()}else l.push([e,r])},allShipsSunk:()=>{let e=0;for(let t=1;t<11;t++)o[t].isSunk()&&e++;return e>=10},missedShots:l,currentShipsOBJ:o}}console.log("test"),console.log("change");const o=("enemyArea",0,0,document.querySelector('.enemyArea .row[data-x="0"] .box[data-y="0"]'));(()=>{const e=t();t(),e.placeShip(4,0,0,!0),e.placeShip(3,6,0,!0),e.placeShip(3,0,1,!0),e.placeShip(2,0,3,!0),e.placeShip(2,0,5,!0),e.placeShip(2,9,6,!1),e.placeShip(1,2,7,!0),e.placeShip(1,3,8,!0),e.placeShip(1,4,9,!0),e.placeShip(1,7,9,!0),console.table(e.gameArena)})(),console.log(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,