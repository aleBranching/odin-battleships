(()=>{"use strict";function e(e){let t=0;const r=e;return{isSunk:()=>t>=r,hit:()=>{t+=1},_length:r,placed:!1,coordinates:void 0}}function t(){const t=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],r=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],o=[],n=e=>{let t=0;return(r=>{for(let r=0;r<o.length;r++)o[r]===e&&t++})(),t<{1:4,2:3,3:2,4:1}[e]},c=[];return{placeShip:(e,c,a,l)=>{if(c<0||a<0||c>10||a>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let s;if((()=>{const r=(()=>{const t=[];if(l){if(l){let r=c;for(let o=0;o<e;o++)if(t.push([r,a]),r++,r>10)throw new Error("Boat out of game!")}}else{let r=a;for(let o=0;o<e;o++)if(t.push([c,r]),r++,r>10)throw new Error("boat out of game!")}return t})();return!!(()=>{let e=!0;return r.forEach((r=>{const o=r[0],n=r[1];0!==t[n][o]&&(e=!1)})),e})()&&(s=[...r],!0)})()&&n(e)){const n=(e=>{let t;for(let o=0;o<=10;o++)if(null!=r[o]&&r[o]._length===e&&!1===r[o].placed){t=o;break}return t})(e);r[n].placed=!0,o.push(e),r[n].coordinates=s,s.forEach((e=>{const r=e[0],o=e[1];t[o][r]=n}))}},gameArena:t,receiveAttack:(e,o)=>{if(0!==t[o][e]){const n=t[o][e];return r[n].hit(),!0}return c.push([e,o]),!1},allShipsSunk:()=>{let e=0;for(let t=1;t<11;t++)r[t].isSunk()&&e++;return e>=10},missedShots:c,currentShipsOBJ:r}}const r=function(){const e=(e,t,r)=>document.querySelector(`.${e} .row[data-x="${t}"] .box[data-y="${r}"]`);return{renderExistingBoats:(t,r)=>{const o=([t,o])=>{e(r,t,o).style.backgroundColor="grey"};t.currentShipsOBJ.forEach((e=>{null==e||e.coordinates.forEach(o)}))},getBoxDOM:e,getXandY:e=>{const{y:t}=e.target.dataset,{x:r}=e.target.parentElement.dataset;return[r,t]},changeAllBoxesOfShip:(t,r,o)=>{const{coordinates:n}=o.currentShipsOBJ[t];n.forEach((t=>{const[o,n]=t;e(`${r}`,o,n).style.backgroundColor="red"}))},getBoxDOMsShipIndex:(e,t,r)=>e.gameArena[r][t],changeBoxColour:(t,r,o,n)=>{e(t,r,o).style.backgroundColor=n},toggleHovering:()=>{document.querySelector(".enemyArea").classList.toggle("hovering")}}}();(()=>{const e=t(),o=t();var n,c;c=o,(n=e).placeShip(4,0,0,!0),n.placeShip(3,6,0,!0),n.placeShip(3,0,1,!0),n.placeShip(2,0,3,!0),n.placeShip(2,0,5,!0),n.placeShip(2,9,6,!1),n.placeShip(1,2,7,!0),n.placeShip(1,3,8,!0),n.placeShip(1,4,9,!0),n.placeShip(1,7,9,!0),c.placeShip(4,0,0,!0),c.placeShip(3,6,0,!0),c.placeShip(3,0,1,!0),c.placeShip(2,0,3,!0),c.placeShip(2,0,5,!0),c.placeShip(2,9,6,!1),c.placeShip(1,2,7,!0),c.placeShip(1,3,8,!0),c.placeShip(1,4,9,!0),c.placeShip(1,7,9,!0);let a=!0;r.renderExistingBoats(e,"playerArea");const l=e=>{const t=e.target,[n,c]=r.getXandY(e),l=r.getBoxDOMsShipIndex(o,n,c);if(!t.dataset.hit){if(t.dataset.hit=!0,i(),o.receiveAttack(n,c)){const e=o.currentShipsOBJ[l];t.style.backgroundColor="grey",e.isSunk()&&r.changeAllBoxesOfShip(l,"enemyArea",o),o.allShipsSunk()&&(alert("game Over"),a=!1)}else t.style.backgroundColor="rgb(190, 146, 154)";p()}},s=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.addEventListener("click",l,{once:!0})}))},i=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.removeEventListener("click",l)})),r.toggleHovering()},h=function(e){const t=[];console.log(t);const r=()=>{const e=Math.floor(10*Math.random()),o=Math.floor(10*Math.random());return void 0!==t.find((t=>t[0]===e&&t[1]===o))?r():[e,o]};return{attack:()=>{const[o,n]=r();console.log("random coord",o,n);const c=e.receiveAttack(o,n);return t.push([o,n]),[c,o,n]}}}(e),p=()=>{if(!a)return;const[t,o,n]=h.attack(),c=r.getBoxDOM("playerArea",o,n);if(t){const t=r.getBoxDOMsShipIndex(e,o,n),a=e.currentShipsOBJ[t];c.style.backgroundColor="pink",s(),a.isSunk()&&r.changeAllBoxesOfShip(t,"playerArea",e)}else c.style.backgroundColor="rgb(190, 146, 154)",s()};s()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,