(()=>{"use strict";function e(e){let o=0;const t=e;return{isSunk:()=>o>=t,hit:()=>{o+=1},_length:t,placed:!1,coordinates:void 0}}function o(){const o=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],t=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],r=[],n=e=>{let o=0;return(t=>{for(let t=0;t<r.length;t++)r[t]===e&&o++})(),o<{1:4,2:3,3:2,4:1}[e]},a=e=>{const[o,t]=[Math.floor(10*Math.random()),Math.floor(10*Math.random())],r=1===Math.floor(2*Math.random());try{l(e,o,t,r)}catch(o){return a(e)}},l=(e,a,l,c)=>{if(a<0||l<0||a>10||l>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let s;if(!(()=>{const t=(()=>{const o=[];if(c){if(c){let t=a;for(let r=0;r<e;r++)if(o.push([t,l]),t++,t>10)throw new Error("Boat out of game!")}}else{let t=l;for(let r=0;r<e;r++)if(o.push([a,t]),t++,t>10)throw new Error("boat out of game!")}return o})();return!!(()=>{let e=!0;return t.forEach((t=>{const r=t[0],n=t[1];0!==o[n][r]&&(e=!1)})),e})()&&(s=[...t],!0)})()||!n(e))throw new Error("most likely ship is overlaping");{const n=(e=>{let o;for(let r=0;r<=10;r++)if(null!=t[r]&&t[r]._length===e&&!1===t[r].placed){o=r;break}return o})(e);t[n].placed=!0,r.push(e),t[n].coordinates=s,s.forEach((e=>{const t=e[0],r=e[1];o[r][t]=n}))}},c=[];return{placeShip:l,gameArena:o,receiveAttack:(e,r)=>{if(0!==o[r][e]){const n=o[r][e];return t[n].hit(),!0}return c.push([e,r]),!1},allShipsSunk:()=>{let e=0;for(let o=1;o<11;o++)t[o].isSunk()&&e++;return e>=10},missedShots:c,currentShipsOBJ:t,placeShipRandomly:a}}const t=function(){const e=(e,o,t)=>document.querySelector(`.${e} .row[data-x="${o}"] .box[data-y="${t}"]`);return{renderExistingBoats:(o,t)=>{const r=([o,r])=>{e(t,o,r).style.backgroundColor="grey"};o.currentShipsOBJ.forEach((e=>{null==e||e.coordinates.forEach(r)}))},getBoxDOM:e,getXandY:e=>{const{y:o}=e.target.dataset,{x:t}=e.target.parentElement.dataset;return[t,o]},changeAllBoxesOfShip:(o,t,r)=>{const{coordinates:n}=r.currentShipsOBJ[o];n.forEach((o=>{const[r,n]=o;e(`${t}`,r,n).style.backgroundColor="red"}))},getBoxDOMsShipIndex:(e,o,t)=>e.gameArena[t][o],changeBoxColour:(o,t,r,n)=>{e(o,t,r).style.backgroundColor=n},toggleHovering:()=>{document.querySelector(".enemyArea").classList.toggle("hovering")}}}();(()=>{const e=o(),r=o();var n,a;a=r,(n=e).placeShipRandomly(4),n.placeShipRandomly(3),n.placeShipRandomly(3),n.placeShipRandomly(2),n.placeShipRandomly(2),n.placeShipRandomly(2),n.placeShipRandomly(1),n.placeShipRandomly(1),n.placeShipRandomly(1),n.placeShipRandomly(1),a.placeShipRandomly(4),a.placeShipRandomly(3),a.placeShipRandomly(3),a.placeShipRandomly(2),a.placeShipRandomly(2),a.placeShipRandomly(2),a.placeShipRandomly(1),a.placeShipRandomly(1),a.placeShipRandomly(1),a.placeShipRandomly(1);let l=!0;t.renderExistingBoats(e,"playerArea");const c=e=>{const o=e.target,[n,a]=t.getXandY(e),c=t.getBoxDOMsShipIndex(r,n,a);if(!o.dataset.hit){if(o.dataset.hit=!0,i(),r.receiveAttack(n,a)){const e=r.currentShipsOBJ[c];o.style.backgroundColor="grey",e.isSunk()&&t.changeAllBoxesOfShip(c,"enemyArea",r),r.allShipsSunk()&&(alert("game Over"),l=!1)}else o.style.backgroundColor="rgb(201, 201, 178)";p()}},s=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.addEventListener("click",c,{once:!0})}))},i=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.removeEventListener("click",c)})),t.toggleHovering()},h=function(e){const o=[];console.log(o);const t=()=>{const e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());return void 0!==o.find((o=>o[0]===e&&o[1]===r))?t():[e,r]};return{attack:()=>{const[r,n]=t();console.log("random coord",r,n);const a=e.receiveAttack(r,n);return o.push([r,n]),[a,r,n]}}}(e),p=()=>{if(!l)return;const[o,r,n]=h.attack(),a=t.getBoxDOM("playerArea",r,n);if(o){const o=t.getBoxDOMsShipIndex(e,r,n),l=e.currentShipsOBJ[o];a.style.backgroundColor="pink",s(),l.isSunk()&&t.changeAllBoxesOfShip(o,"playerArea",e)}else a.style.backgroundColor="rgb(201, 201, 178)",s()};s()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RG9IbUJ1RixDQUFZNUIsR0FDdkJXLEVBQVksS0FDaEIsSUFBS1AsRUFDSCxPQUlGLE1BQU91QixFQUFPdkYsRUFBR0MsR0FBSzZFLEVBQVNRLFNBRXpCRyxFQUFTeEIsRUFBYS9CLFVBQVUsYUFBY2xDLEVBQUdDLEdBRXZELEdBQUlzRixFQUFPLENBQ1QsTUFBTUcsRUFBaUJ6QixFQUFhWCxvQkFDbENNLEVBQ0E1RCxFQUNBQyxHQUVJb0UsRUFBVVQsRUFBZ0JwRSxnQkFBZ0JrRyxHQUVoREQsRUFBT2hELE1BQU1DLGdCQUFrQixPQUMvQjhCLElBQ0lILEVBQVFuRixVQUNWK0UsRUFBYWpCLHFCQUNYMEMsRUFDQSxhQUNBOUIsRUFHTixNQUVFNkIsRUFBT2hELE1BQU1DLGdCQUFrQixxQkFDL0I4QixHQUNGLEVBR0ZBLEdBQWEsRUFHZm1CLEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXBzLy4vc3JjL2xvZ2ljL3NoaXAuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwcy8uL3NyYy9sb2dpYy9nYW1lYm9hcmQuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwcy8uL3NyYy9sb2dpYy9VSWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vb2Rpbi1iYXR0bGVzaGlwcy8uL3NyYy9sb2dpYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vZGluLWJhdHRsZXNoaXBzLy4vc3JjL2xvZ2ljL2NvbXB1dGVyUGxheWVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNoaXAobGVuZ3RoKSB7XG4gIGxldCBfaGl0cyA9IDA7XG4gIGNvbnN0IF9sZW5ndGggPSBsZW5ndGg7XG4gIGNvbnN0IHBsYWNlZCA9IGZhbHNlO1xuICBsZXQgY29vcmRpbmF0ZXM7XG5cbiAgY29uc3QgaGl0ID0gKCkgPT4ge1xuICAgIF9oaXRzICs9IDE7XG4gIH07XG5cbiAgY29uc3QgaXNTdW5rID0gKCkgPT4gX2hpdHMgPj0gX2xlbmd0aDtcblxuICAvLyAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuXG4gIC8vICAgdGhpcy5fc3VuayA9IGZhbHNlO1xuICAvLyAgIHRoaXMuX2hpdHMgPSAwO1xuXG4gIC8vICAgZnVuY3Rpb24gaGl0KCkge1xuICAvLyAgICAgdGhpcy5faGl0cyA9ICsxO1xuICAvLyAgICAgLy9cbiAgLy8gICB9XG5cbiAgLy8gICBmdW5jdGlvbiBpc1N1bmsoKSB7XG4gIC8vICAgICByZXR1cm4gdGhpcy5faGl0cyA+PSBsZW5ndGggPyB0cnVlIDogZmFsc2U7XG4gIC8vICAgICAvL1xuICAvLyAgIH1cblxuICByZXR1cm4geyBpc1N1bmssIGhpdCwgX2xlbmd0aCwgcGxhY2VkLCBjb29yZGluYXRlcyB9O1xufVxuIiwiaW1wb3J0IFNoaXAgZnJvbSBcIi4vc2hpcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHYW1lYm9hcmQoKSB7XG4gIC8vIGVhY2ggbnVtYmVyIGNvcnJlc3BvbmRzIHRvIGluZGV4IG9mIGN1cnJlbnRTaGlwc09CSlxuICBjb25zdCBnYW1lQXJlbmEgPSBbXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICBdO1xuXG4gIGNvbnN0IHBvc2l0aW9uR2FtZUFyZW5hID0gW1xuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgICBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gICAgWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAgIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgXTtcblxuICBjb25zdCBjdXJyZW50U2hpcHNPQkogPSBbXG4gICAgbnVsbCxcbiAgICBTaGlwKDQpLFxuICAgIFNoaXAoMyksXG4gICAgU2hpcCgzKSxcbiAgICBTaGlwKDIpLFxuICAgIFNoaXAoMiksXG4gICAgU2hpcCgyKSxcbiAgICBTaGlwKDEpLFxuICAgIFNoaXAoMSksXG4gICAgU2hpcCgxKSxcbiAgICBTaGlwKDEpLFxuICBdO1xuXG4gIGNvbnN0IG5ld1NoaXBJbmRleCA9IChsZW5ndGgpID0+IHtcbiAgICBsZXQgaW5kZXg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gMTA7IGkrKykge1xuICAgICAgLy8gY29uc29sZS5sb2coXCJUSElTXCIsIGN1cnJlbnRTaGlwc09CSltpXS5fbGVuZ3RoKTtcbiAgICAgIGlmIChjdXJyZW50U2hpcHNPQkpbaV0gPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudFNoaXBzT0JKW2ldLl9sZW5ndGggPT09IGxlbmd0aCAmJlxuICAgICAgICBjdXJyZW50U2hpcHNPQkpbaV0ucGxhY2VkID09PSBmYWxzZVxuICAgICAgKSB7XG4gICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfTtcblxuICBjb25zdCBfcGxhY2VkU2hpcHMgPSBbXTtcblxuICBjb25zdCBzaGlwTnVtYmVyUnVsZXNQYXNzZWQgPSAobGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgX2FsbG93ZWRPY2N1cmFuY2VzID0ge1xuICAgICAgMTogNCxcbiAgICAgIDI6IDMsXG4gICAgICAzOiAyLFxuICAgICAgNDogMSxcbiAgICB9O1xuICAgIGxldCBsZW5ndGhPY2NjdXJlZCA9IDA7XG4gICAgY29uc3QgX29jY3VyYW5jZXMgPSAodGFyZ2V0TGVuZ3RoKSA9PiB7XG4gICAgICAvLyBsZXQgY291bnRlciA9IDA7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgX3BsYWNlZFNoaXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChfcGxhY2VkU2hpcHNbaV0gPT09IGxlbmd0aCkge1xuICAgICAgICAgIGxlbmd0aE9jY2N1cmVkKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIF9vY2N1cmFuY2VzKCk7XG5cbiAgICBpZiAobGVuZ3RoT2NjY3VyZWQgPCBfYWxsb3dlZE9jY3VyYW5jZXNbbGVuZ3RoXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGNvbnN0IGdldFJhbmRvbUNvb3JkID0gKCkgPT4ge1xuICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgY29uc3QgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICByZXR1cm4gW3gsIHldO1xuICB9O1xuXG4gIGNvbnN0IGdldFRydWVPckZhbHNlID0gKCkgPT4ge1xuICAgIGNvbnN0IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDIpO1xuICAgIGlmIChudW1iZXIgPT09IDEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgY29uc3QgcGxhY2VTaGlwUmFuZG9tbHkgPSAobGVuZ3RoKSA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gZ2V0UmFuZG9tQ29vcmQoKTtcbiAgICBjb25zdCBob3Jpem9udGFsbHkgPSBnZXRUcnVlT3JGYWxzZSgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHBsYWNlU2hpcChsZW5ndGgsIHgsIHksIGhvcml6b250YWxseSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHBsYWNlU2hpcFJhbmRvbWx5KGxlbmd0aCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHBsYWNlU2hpcCA9IChsZW5ndGgsIHgsIHksIGhvcml6b250YWxseSkgPT4ge1xuICAgIC8vIHRlc3QgdmFsaWRpdHkgb2YgY28tb3JkIG9yIGFtb3VudCBvZiBzaGlwc1xuICAgIGlmICh4IDwgMCB8fCB5IDwgMCB8fCB4ID4gMTAgfHwgeSA+IDEwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKGUpID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBcImNhbid0IHBsYWNlIHNoaXAgaGVyZSBvciBubyBtb3JlIG9mIHRoZXNlIHNoaXBzIG9yIHNoaXAgdG9vIGJpZ1wiXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoIXNoaXBOdW1iZXJSdWxlc1Bhc3NlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJjYW4ndCBwdXQgYW55bW9yZSBvZiB0aGVzZSBzaGlwc1wiKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGxldCBjaGVja2VkQ29vcmQ7XG5cbiAgICBjb25zdCBjaGVja0Nvb3JkID0gKCkgPT4ge1xuICAgICAgLy8gd2hhdCB3b3VsZCB0aGV5IGJlIG5haXZlbHlcblxuICAgICAgY29uc3QgbmFpdmVDb29yID0gKCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgaWYgKCFob3Jpem9udGFsbHkpIHtcbiAgICAgICAgICBsZXQgbmV3WSA9IHk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goW3gsIG5ld1ldKTtcbiAgICAgICAgICAgIG5ld1krKztcbiAgICAgICAgICAgIGlmIChuZXdZID4gMTApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYm9hdCBvdXQgb2YgZ2FtZSFcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGhvcml6b250YWxseSkge1xuICAgICAgICAgIGxldCBuZXdYID0geDtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChbbmV3WCwgeV0pO1xuICAgICAgICAgICAgbmV3WCsrO1xuICAgICAgICAgICAgaWYgKG5ld1ggPiAxMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJCb2F0IG91dCBvZiBnYW1lIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSkoKTtcblxuICAgICAgY29uc3QgY2hlY2tGb3JPdmVybGFwID0gKCkgPT4ge1xuICAgICAgICBsZXQgYWxsb3dlZCA9IHRydWU7XG5cbiAgICAgICAgbmFpdmVDb29yLmZvckVhY2goKGNvb3JkaW5hdGUpID0+IHtcbiAgICAgICAgICBjb25zdCBhblggPSBjb29yZGluYXRlWzBdO1xuICAgICAgICAgIGNvbnN0IGFuWSA9IGNvb3JkaW5hdGVbMV07XG5cbiAgICAgICAgICAvLyBpbiBnYW1lYXJlbmEgZmlyc3QgaGF2ZSB0byBhY2Nlc3MgWVxuXG4gICAgICAgICAgaWYgKGdhbWVBcmVuYVthblldW2FuWF0gIT09IDApIHtcbiAgICAgICAgICAgIGFsbG93ZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBhbGxvd2VkO1xuICAgICAgfTtcblxuICAgICAgaWYgKGNoZWNrRm9yT3ZlcmxhcCgpKSB7XG4gICAgICAgIGNoZWNrZWRDb29yZCA9IFsuLi5uYWl2ZUNvb3JdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAvLyBjb25zb2xlLmxvZyhcIlRISVNcIiwgc2hpcE51bWJlclJ1bGVzUGFzc2VkKGxlbmd0aCkpO1xuICAgIGlmIChjaGVja0Nvb3JkKCkgJiYgc2hpcE51bWJlclJ1bGVzUGFzc2VkKGxlbmd0aCkpIHtcbiAgICAgIGNvbnN0IHNoaXBPQkpJbmRleCA9IG5ld1NoaXBJbmRleChsZW5ndGgpO1xuICAgICAgY3VycmVudFNoaXBzT0JKW3NoaXBPQkpJbmRleF0ucGxhY2VkID0gdHJ1ZTtcbiAgICAgIF9wbGFjZWRTaGlwcy5wdXNoKGxlbmd0aCk7XG5cbiAgICAgIGN1cnJlbnRTaGlwc09CSltzaGlwT0JKSW5kZXhdLmNvb3JkaW5hdGVzID0gY2hlY2tlZENvb3JkO1xuICAgICAgY2hlY2tlZENvb3JkLmZvckVhY2goKGFDb29yZGluYXRlKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld3ggPSBhQ29vcmRpbmF0ZVswXTtcbiAgICAgICAgY29uc3QgbmV3eSA9IGFDb29yZGluYXRlWzFdO1xuXG4gICAgICAgIGdhbWVBcmVuYVtuZXd5XVtuZXd4XSA9IHNoaXBPQkpJbmRleDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJtb3N0IGxpa2VseSBzaGlwIGlzIG92ZXJsYXBpbmdcIik7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IHBvc2l0aW9uU2hpcFJhbmRvbWx5ID0gKGZha2VBcmVuYSwgbGVuZ3RoLCB4LCB5LCBob3Jpem9udGFsbHkpID0+IHtcbiAgICAvLyB0ZXN0IHZhbGlkaXR5IG9mIGNvLW9yZCBvciBhbW91bnQgb2Ygc2hpcHNcbiAgICBpZiAoeCA8IDAgfHwgeSA8IDAgfHwgeCA+IDEwIHx8IHkgPiAxMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKChlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgXCJjYW4ndCBwbGFjZSBzaGlwIGhlcmUgb3Igbm8gbW9yZSBvZiB0aGVzZSBzaGlwcyBvciBzaGlwIHRvbyBiaWdcIlxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IGNoZWNrZWRDb29yZDtcblxuICAgIGNvbnN0IGNoZWNrQ29vcmQgPSAoKSA9PiB7XG4gICAgICAvLyB3aGF0IHdvdWxkIHRoZXkgYmUgbmFpdmVseVxuXG4gICAgICBjb25zdCBuYWl2ZUNvb3IgPSAoKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgICAgICBpZiAoIWhvcml6b250YWxseSkge1xuICAgICAgICAgIGxldCBuZXdZID0geTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChbeCwgbmV3WV0pO1xuICAgICAgICAgICAgbmV3WSsrO1xuICAgICAgICAgICAgaWYgKG5ld1kgPiAxMCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJib2F0IG91dCBvZiBnYW1lIVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaG9yaXpvbnRhbGx5KSB7XG4gICAgICAgICAgbGV0IG5ld1ggPSB4O1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKFtuZXdYLCB5XSk7XG4gICAgICAgICAgICBuZXdYKys7XG4gICAgICAgICAgICBpZiAobmV3WCA+IDEwKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkJvYXQgb3V0IG9mIGdhbWUhXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KSgpO1xuXG4gICAgICBjb25zdCBjaGVja0Zvck92ZXJsYXAgPSAoKSA9PiB7XG4gICAgICAgIGxldCBhbGxvd2VkID0gdHJ1ZTtcblxuICAgICAgICBuYWl2ZUNvb3IuZm9yRWFjaCgoY29vcmRpbmF0ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGFuWCA9IGNvb3JkaW5hdGVbMF07XG4gICAgICAgICAgY29uc3QgYW5ZID0gY29vcmRpbmF0ZVsxXTtcblxuICAgICAgICAgIC8vIGluIGdhbWVhcmVuYSBmaXJzdCBoYXZlIHRvIGFjY2VzcyBZXG5cbiAgICAgICAgICBpZiAocG9zaXRpb25HYW1lQXJlbmFbYW5ZXVthblhdICE9PSAwKSB7XG4gICAgICAgICAgICBhbGxvd2VkID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYWxsb3dlZDtcbiAgICAgIH07XG5cbiAgICAgIGlmIChjaGVja0Zvck92ZXJsYXAoKSkge1xuICAgICAgICBjaGVja2VkQ29vcmQgPSBbLi4ubmFpdmVDb29yXTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLy8gY29uc29sZS5sb2coXCJUSElTXCIsIHNoaXBOdW1iZXJSdWxlc1Bhc3NlZChsZW5ndGgpKTtcbiAgICBpZiAoY2hlY2tDb29yZCgpKSB7XG4gICAgICAvLyBjb25zdCBzaGlwT0JKSW5kZXggPSBuZXdTaGlwSW5kZXgobGVuZ3RoKTtcbiAgICAgIC8vIGN1cnJlbnRTaGlwc09CSltzaGlwT0JKSW5kZXhdLnBsYWNlZCA9IHRydWU7XG4gICAgICAvLyBfcGxhY2VkU2hpcHMucHVzaChsZW5ndGgpO1xuXG4gICAgICAvLyBjdXJyZW50U2hpcHNPQkpbc2hpcE9CSkluZGV4XS5jb29yZGluYXRlcyA9IGNoZWNrZWRDb29yZDtcbiAgICAgIGNoZWNrZWRDb29yZC5mb3JFYWNoKChhQ29vcmRpbmF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXd4ID0gYUNvb3JkaW5hdGVbMF07XG4gICAgICAgIGNvbnN0IG5ld3kgPSBhQ29vcmRpbmF0ZVsxXTtcblxuICAgICAgICBnYW1lQXJlbmFbbmV3eV1bbmV3eF0gPSAxO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIm1vc3QgbGlrZWx5IHNoaXAgaXMgb3ZlcmxhcGluZ1wiKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG1pc3NlZFNob3RzID0gW107XG5cbiAgY29uc3QgcmVjZWl2ZUF0dGFjayA9ICh4LCB5KSA9PiB7XG4gICAgaWYgKGdhbWVBcmVuYVt5XVt4XSAhPT0gMCkge1xuICAgICAgY29uc3Qgc2hpcE9CSkluZGV4ID0gZ2FtZUFyZW5hW3ldW3hdO1xuICAgICAgY3VycmVudFNoaXBzT0JKW3NoaXBPQkpJbmRleF0uaGl0KCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgbWlzc2VkU2hvdHMucHVzaChbeCwgeV0pO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBjb25zdCBhbGxTaGlwc1N1bmsgPSAoKSA9PiB7XG4gICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgMTE7IGkrKykge1xuICAgICAgaWYgKGN1cnJlbnRTaGlwc09CSltpXS5pc1N1bmsoKSkge1xuICAgICAgICBjb3VudGVyKys7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb3VudGVyID49IDEwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgcGxhY2VTaGlwLFxuICAgIGdhbWVBcmVuYSxcbiAgICByZWNlaXZlQXR0YWNrLFxuICAgIGFsbFNoaXBzU3VuayxcbiAgICBtaXNzZWRTaG90cyxcbiAgICBjdXJyZW50U2hpcHNPQkosXG4gICAgcGxhY2VTaGlwUmFuZG9tbHksXG4gIH07XG59XG4iLCJpbXBvcnQgR2FtZWJvYXJkIGZyb20gXCIuL2dhbWVib2FyZFwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gVUljb250cm9sbGVyKCkge1xuICBjb25zdCBnZXRCb3hET00gPSAoYXJlYSwgeCwgeSkgPT5cbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHthcmVhfSAucm93W2RhdGEteD1cIiR7eH1cIl0gLmJveFtkYXRhLXk9XCIke3l9XCJdYCk7XG5cbiAgY29uc3QgcmVuZGVyRXhpc3RpbmdCb2F0cyA9IChnYW1lQXJlbmEsIHBsYXllckFyZWFET00pID0+IHtcbiAgICBjb25zdCB1cGRhdGVFYWNoRE9NQ29vcmRpbmF0ZSA9IChbeCwgeV0pID0+IHtcbiAgICAgIGdldEJveERPTShwbGF5ZXJBcmVhRE9NLCB4LCB5KS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZXlcIjtcbiAgICB9O1xuXG4gICAgZ2FtZUFyZW5hLmN1cnJlbnRTaGlwc09CSi5mb3JFYWNoKChhU2hpcCkgPT4ge1xuICAgICAgaWYgKGFTaGlwID09IG51bGwpIHtcbiAgICAgICAgLy8gbnVsbFxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImhlcmVcIiwgYVNoaXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYVNoaXAuY29vcmRpbmF0ZXMuZm9yRWFjaCh1cGRhdGVFYWNoRE9NQ29vcmRpbmF0ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3QgY2hhbmdlQm94Q29sb3VyID0gKGFyZWEsIHgsIHksIGNvbG91cikgPT4ge1xuICAgIGNvbnN0IGhpdEJveERPTSA9IGdldEJveERPTShhcmVhLCB4LCB5KTtcbiAgICBoaXRCb3hET00uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gY29sb3VyO1xuICB9O1xuXG4gIGNvbnN0IHRvZ2dsZUhvdmVyaW5nID0gKCkgPT4ge1xuICAgIGNvbnN0IGFyZWEgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmVuZW15QXJlYVwiKTtcbiAgICBhcmVhLmNsYXNzTGlzdC50b2dnbGUoXCJob3ZlcmluZ1wiKTtcbiAgfTtcblxuICBjb25zdCBnZXRCb3hET01zU2hpcEluZGV4ID0gKGdhbWVBcmVuYSwgeCwgeSkgPT4ge1xuICAgIGNvbnN0IHNoaXBJbmRleCA9IGdhbWVBcmVuYS5nYW1lQXJlbmFbeV1beF07XG4gICAgcmV0dXJuIHNoaXBJbmRleDtcbiAgfTtcblxuICBjb25zdCBjaGFuZ2VBbGxCb3hlc09mU2hpcCA9IChzaGlwSW5kZXgsIGFyZWFDbGFzcywgZ2FtZUFyZW5hKSA9PiB7XG4gICAgY29uc3QgeyBjb29yZGluYXRlcyB9ID0gZ2FtZUFyZW5hLmN1cnJlbnRTaGlwc09CSltzaGlwSW5kZXhdO1xuICAgIGNvb3JkaW5hdGVzLmZvckVhY2goKGFDb29yZCkgPT4ge1xuICAgICAgY29uc3QgW3NoaXBYLCBzaGlwWV0gPSBhQ29vcmQ7XG4gICAgICBnZXRCb3hET00oYCR7YXJlYUNsYXNzfWAsIHNoaXBYLCBzaGlwWSkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBnZXRYYW5kWSA9IChlKSA9PiB7XG4gICAgY29uc3QgeyB5IH0gPSBlLnRhcmdldC5kYXRhc2V0O1xuICAgIGNvbnN0IHsgeCB9ID0gZS50YXJnZXQucGFyZW50RWxlbWVudC5kYXRhc2V0O1xuXG4gICAgcmV0dXJuIFt4LCB5XTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHJlbmRlckV4aXN0aW5nQm9hdHMsXG4gICAgZ2V0Qm94RE9NLFxuICAgIGdldFhhbmRZLFxuICAgIGNoYW5nZUFsbEJveGVzT2ZTaGlwLFxuICAgIGdldEJveERPTXNTaGlwSW5kZXgsXG4gICAgY2hhbmdlQm94Q29sb3VyLFxuICAgIHRvZ2dsZUhvdmVyaW5nLFxuICB9O1xufSkoKTtcbiIsImltcG9ydCBHYW1lYm9hcmQgZnJvbSBcIi4vZ2FtZWJvYXJkXCI7XG5pbXBvcnQgVUljb250cm9sbGVyIGZyb20gXCIuL1VJY29udHJvbGxlclwiO1xuaW1wb3J0IGVuZW15UGxheWVyIGZyb20gXCIuL2NvbXB1dGVyUGxheWVyXCI7XG4vLyBpbXBvcnQgZW5lbXlQbGF5ZXIgZnJvbSBcIi4vY29tcHV0ZXJQbGF5ZXJcIjtcblxuLy8gY29uc3QgdGVzdCA9IGdldEJveERPTShcImVuZW15QXJlYVwiLCAwLCAwKTtcblxuY29uc3QgZ2FtZUxvb3AgPSAoKSA9PiB7XG4gIC8vIFs0LCA0LCA0LCA0LCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgLy8gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAvLyBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gIC8vIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgLy8gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAvLyBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gIC8vIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcbiAgLy8gWzAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDBdLFxuICAvLyBbMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMCwgMF0sXG4gIC8vIFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwXSxcblxuICBjb25zdCBzZXRVcFBsYWNlbWVudHMgPSAoZ2FtZWJvYXJkMSwgZ2FtZWJvYXJkMikgPT4ge1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwKDMsIDYsIDAsIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwKDMsIDAsIDEsIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwKDIsIDAsIDMsIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwKDIsIDAsIDUsIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwKDIsIDksIDYsIGZhbHNlKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcCgxLCAyLCA3LCB0cnVlKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcCgxLCAzLCA4LCB0cnVlKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcCgxLCA0LCA5LCB0cnVlKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcCgxLCA3LCA5LCB0cnVlKTtcbiAgICAvLyAvLyBkZWJ1Z2dlcjtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcCg0LCAwLCAwLCB0cnVlKTtcbiAgICAvLyBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICAgIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoNCk7XG4gICAgZ2FtZWJvYXJkMS5wbGFjZVNoaXBSYW5kb21seSgzKTtcbiAgICBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDMpO1xuICAgIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoMik7XG4gICAgZ2FtZWJvYXJkMS5wbGFjZVNoaXBSYW5kb21seSgyKTtcbiAgICBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDIpO1xuICAgIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoMSk7XG4gICAgZ2FtZWJvYXJkMS5wbGFjZVNoaXBSYW5kb21seSgxKTtcbiAgICBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDEpO1xuICAgIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoMSk7XG5cbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDQpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoMyk7XG4gICAgLy8gZ2FtZWJvYXJkMS5wbGFjZVNoaXBSYW5kb21seSgzKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDIpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoMik7XG4gICAgLy8gZ2FtZWJvYXJkMS5wbGFjZVNoaXBSYW5kb21seSgyKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDEpO1xuICAgIC8vIGdhbWVib2FyZDEucGxhY2VTaGlwUmFuZG9tbHkoMSk7XG4gICAgLy8gZ2FtZWJvYXJkMS5wbGFjZVNoaXBSYW5kb21seSgxKTtcbiAgICAvLyBnYW1lYm9hcmQxLnBsYWNlU2hpcFJhbmRvbWx5KDEpO1xuICAgIC8vIGRlYnVnZ2VyO1xuICAgIGdhbWVib2FyZDIucGxhY2VTaGlwUmFuZG9tbHkoNCk7XG4gICAgZ2FtZWJvYXJkMi5wbGFjZVNoaXBSYW5kb21seSgzKTtcbiAgICBnYW1lYm9hcmQyLnBsYWNlU2hpcFJhbmRvbWx5KDMpO1xuICAgIGdhbWVib2FyZDIucGxhY2VTaGlwUmFuZG9tbHkoMik7XG4gICAgZ2FtZWJvYXJkMi5wbGFjZVNoaXBSYW5kb21seSgyKTtcbiAgICBnYW1lYm9hcmQyLnBsYWNlU2hpcFJhbmRvbWx5KDIpO1xuICAgIGdhbWVib2FyZDIucGxhY2VTaGlwUmFuZG9tbHkoMSk7XG4gICAgZ2FtZWJvYXJkMi5wbGFjZVNoaXBSYW5kb21seSgxKTtcbiAgICBnYW1lYm9hcmQyLnBsYWNlU2hpcFJhbmRvbWx5KDEpO1xuICAgIGdhbWVib2FyZDIucGxhY2VTaGlwUmFuZG9tbHkoMSk7XG5cbiAgICAvLyBjb25zdCByZXN1bHQgPSBnYW1lYm9hcmQxLnBsYWNlU2hpcCgxLCAwLCAwLCB0cnVlKTtcbiAgICAvLyBjb25zb2xlLmxvZyhyZXN1bHQpO1xuXG4gICAgLy8gZ2FtZWJvYXJkMi5wbGFjZVNoaXAoNCwgMCwgMCwgdHJ1ZSk7XG4gICAgLy8gZ2FtZWJvYXJkMi5wbGFjZVNoaXAoMywgNiwgMCwgdHJ1ZSk7XG4gICAgLy8gZ2FtZWJvYXJkMi5wbGFjZVNoaXAoMywgMCwgMSwgdHJ1ZSk7XG4gICAgLy8gZ2FtZWJvYXJkMi5wbGFjZVNoaXAoMiwgMCwgMywgdHJ1ZSk7XG4gICAgLy8gZ2FtZWJvYXJkMi5wbGFjZVNoaXAoMiwgMCwgNSwgdHJ1ZSk7XG4gICAgLy8gZ2FtZWJvYXJkMi5wbGFjZVNoaXAoMiwgOSwgNiwgZmFsc2UpO1xuICAgIC8vIGdhbWVib2FyZDIucGxhY2VTaGlwKDEsIDIsIDcsIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDIucGxhY2VTaGlwKDEsIDMsIDgsIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDIucGxhY2VTaGlwKDEsIDQsIDksIHRydWUpO1xuICAgIC8vIGdhbWVib2FyZDIucGxhY2VTaGlwKDEsIDcsIDksIHRydWUpO1xuICB9O1xuXG4gIC8vICAgZGVidWdnZXI7XG5cbiAgLy8gICB3aGlsZSAoIWdhbWVPdmVyKSB7XG4gIGNvbnN0IHBsYXllckdhbWVib2FyZCA9IEdhbWVib2FyZCgpO1xuICBjb25zdCBlbmVteUdhbWVib2FyZCA9IEdhbWVib2FyZCgpO1xuICBzZXRVcFBsYWNlbWVudHMocGxheWVyR2FtZWJvYXJkLCBlbmVteUdhbWVib2FyZCk7XG4gIGxldCBnYW1lT0sgPSB0cnVlO1xuXG4gIFVJY29udHJvbGxlci5yZW5kZXJFeGlzdGluZ0JvYXRzKHBsYXllckdhbWVib2FyZCwgXCJwbGF5ZXJBcmVhXCIpO1xuICAvLyAgIFVJY29udHJvbGxlci5lbmVteUJveERPTUxpc3RlbmVyKGVuZW15R2FtZWJvYXJkKTtcbiAgLy8gICBjb25zb2xlLmxvZyhcImhhcHBlbnNcIik7XG5cbiAgY29uc3QgaGFuZGxlUGxheWVyQ2xpY2sgPSAoZSkgPT4ge1xuICAgIGNvbnN0IGJveERvbSA9IGUudGFyZ2V0O1xuICAgIGNvbnN0IFt4LCB5XSA9IFVJY29udHJvbGxlci5nZXRYYW5kWShlKTtcbiAgICBjb25zdCBzaGlwSW5kZXggPSBVSWNvbnRyb2xsZXIuZ2V0Qm94RE9Nc1NoaXBJbmRleChlbmVteUdhbWVib2FyZCwgeCwgeSk7XG4gICAgLy8gY29uc29sZS5sb2coXCJldmFsdWF0aW5nXCIsIGJveERvbS5kYXRhc2V0LmhpdCk7XG5cbiAgICBpZiAoIWJveERvbS5kYXRhc2V0LmhpdCkge1xuICAgICAgYm94RG9tLmRhdGFzZXQuaGl0ID0gdHJ1ZTtcbiAgICAgIHJtdkV2ZW50TGlzdGVuZXJBbmRFbmVteVR1cm4oKTtcbiAgICAgIC8vICAgY29uc29sZS5sb2coXCJib29tXCIpO1xuICAgICAgY29uc3QgYXR0YWNrUmVzdWx0ID0gZW5lbXlHYW1lYm9hcmQucmVjZWl2ZUF0dGFjayh4LCB5KTtcbiAgICAgIC8vICAgY29uc29sZS5sb2coXCJhdHRhY2tSZXN1bHRcIiwgYXR0YWNrUmVzdWx0KTtcbiAgICAgIGlmIChhdHRhY2tSZXN1bHQpIHtcbiAgICAgICAgY29uc3Qgc2hpcE9CSiA9IGVuZW15R2FtZWJvYXJkLmN1cnJlbnRTaGlwc09CSltzaGlwSW5kZXhdO1xuICAgICAgICBib3hEb20uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJncmV5XCI7XG5cbiAgICAgICAgaWYgKHNoaXBPQkouaXNTdW5rKCkpIHtcbiAgICAgICAgICBVSWNvbnRyb2xsZXIuY2hhbmdlQWxsQm94ZXNPZlNoaXAoXG4gICAgICAgICAgICBzaGlwSW5kZXgsXG4gICAgICAgICAgICBcImVuZW15QXJlYVwiLFxuICAgICAgICAgICAgZW5lbXlHYW1lYm9hcmRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmVteUdhbWVib2FyZC5hbGxTaGlwc1N1bmsoKSkge1xuICAgICAgICAgIGFsZXJ0KFwiZ2FtZSBPdmVyXCIpO1xuICAgICAgICAgIGdhbWVPSyA9IGZhbHNlO1xuICAgICAgICAgIC8vICAgcmVtb3ZpbmdFdmVudExpc3RlbmVycygpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBib3hEb20uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoMjAxLCAyMDEsIDE3OClcIjtcbiAgICAgICAgLy8gcmVtb3ZpbmdFdmVudExpc3RlbmVycygpO1xuICAgICAgfVxuICAgICAgZW5lbXlUdXJuKCk7XG4gICAgfVxuXG4gICAgLy8gY29uc29sZS5sb2coc2hpcEluZGV4KTtcbiAgfTtcblxuICBjb25zdCBwbGF5ZXJzVHVybiA9ICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAuZW5lbXlBcmVhIC5yb3cgLmJveGApLmZvckVhY2goKGFCb3gpID0+IHtcbiAgICAgIGFCb3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBsYXllckNsaWNrLCB7IG9uY2U6IHRydWUgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgcm12RXZlbnRMaXN0ZW5lckFuZEVuZW15VHVybiA9ICgpID0+IHtcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGAuZW5lbXlBcmVhIC5yb3cgLmJveGApLmZvckVhY2goKGFCb3gpID0+IHtcbiAgICAgIGFCb3gucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZVBsYXllckNsaWNrKTtcbiAgICB9KTtcblxuICAgIFVJY29udHJvbGxlci50b2dnbGVIb3ZlcmluZygpO1xuICB9O1xuXG4gIGNvbnN0IGVuZW15Qm90ID0gZW5lbXlQbGF5ZXIocGxheWVyR2FtZWJvYXJkKTtcbiAgY29uc3QgZW5lbXlUdXJuID0gKCkgPT4ge1xuICAgIGlmICghZ2FtZU9LKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vICAgZW5lbXkncyB0dXJuXG4gICAgLy8gICBjb25zb2xlLmxvZyhlbmVteUJvdCk7XG4gICAgY29uc3QgW2lzSGl0LCB4LCB5XSA9IGVuZW15Qm90LmF0dGFjaygpO1xuXG4gICAgY29uc3QgYm94RE9NID0gVUljb250cm9sbGVyLmdldEJveERPTShcInBsYXllckFyZWFcIiwgeCwgeSk7XG5cbiAgICBpZiAoaXNIaXQpIHtcbiAgICAgIGNvbnN0IGVuZW15U2hpcEluZGV4ID0gVUljb250cm9sbGVyLmdldEJveERPTXNTaGlwSW5kZXgoXG4gICAgICAgIHBsYXllckdhbWVib2FyZCxcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHNoaXBPQkogPSBwbGF5ZXJHYW1lYm9hcmQuY3VycmVudFNoaXBzT0JKW2VuZW15U2hpcEluZGV4XTtcblxuICAgICAgYm94RE9NLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicGlua1wiO1xuICAgICAgcGxheWVyc1R1cm4oKTtcbiAgICAgIGlmIChzaGlwT0JKLmlzU3VuaygpKSB7XG4gICAgICAgIFVJY29udHJvbGxlci5jaGFuZ2VBbGxCb3hlc09mU2hpcChcbiAgICAgICAgICBlbmVteVNoaXBJbmRleCxcbiAgICAgICAgICBcInBsYXllckFyZWFcIixcbiAgICAgICAgICBwbGF5ZXJHYW1lYm9hcmRcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gICBjb25zb2xlLmxvZyhib3hET00pO1xuICAgICAgYm94RE9NLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmdiKDIwMSwgMjAxLCAxNzgpXCI7XG4gICAgICBwbGF5ZXJzVHVybigpO1xuICAgIH1cbiAgfTtcblxuICBwbGF5ZXJzVHVybigpO1xufTtcblxuZ2FtZUxvb3AoKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVuZW15UGxheWVyKGh1bWFuQm9hcmQpIHtcbiAgLy8gbWluIGlzIGluY2x1c2l2ZSBtYXggaXMgZXhjbHVzaXZlXG5cbiAgY29uc3QgbW92ZXNEb25lID0gW107XG4gIGNvbnNvbGUubG9nKG1vdmVzRG9uZSk7XG4gIGNvbnN0IGdldFJhbmRvbUNvb3JkID0gKCkgPT4ge1xuICAgIGNvbnN0IHggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgY29uc3QgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICBjb25zdCBmb3VuZEVsZW1lbnQgPSBtb3Zlc0RvbmUuZmluZChcbiAgICAgIChlbGVtZW50KSA9PiBlbGVtZW50WzBdID09PSB4ICYmIGVsZW1lbnRbMV0gPT09IHlcbiAgICApO1xuXG4gICAgaWYgKGZvdW5kRWxlbWVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gZ2V0UmFuZG9tQ29vcmQoKTtcbiAgICB9XG4gICAgcmV0dXJuIFt4LCB5XTtcbiAgfTtcblxuICBjb25zdCBhdHRhY2sgPSAoKSA9PiB7XG4gICAgY29uc3QgW3gsIHldID0gZ2V0UmFuZG9tQ29vcmQoKTtcbiAgICBjb25zb2xlLmxvZyhcInJhbmRvbSBjb29yZFwiLCB4LCB5KTtcblxuICAgIGNvbnN0IGlzSGl0ID0gaHVtYW5Cb2FyZC5yZWNlaXZlQXR0YWNrKHgsIHkpO1xuICAgIG1vdmVzRG9uZS5wdXNoKFt4LCB5XSk7XG4gICAgcmV0dXJuIFtpc0hpdCwgeCwgeV07XG4gIH07XG5cbiAgcmV0dXJuIHsgYXR0YWNrIH07XG59XG4iXSwibmFtZXMiOlsiU2hpcCIsImxlbmd0aCIsIl9oaXRzIiwiX2xlbmd0aCIsImlzU3VuayIsImhpdCIsInBsYWNlZCIsImNvb3JkaW5hdGVzIiwiR2FtZWJvYXJkIiwiZ2FtZUFyZW5hIiwiY3VycmVudFNoaXBzT0JKIiwiX3BsYWNlZFNoaXBzIiwic2hpcE51bWJlclJ1bGVzUGFzc2VkIiwibGVuZ3RoT2NjY3VyZWQiLCJ0YXJnZXRMZW5ndGgiLCJpIiwiX29jY3VyYW5jZXMiLCJwbGFjZVNoaXBSYW5kb21seSIsIngiLCJ5IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiaG9yaXpvbnRhbGx5IiwicGxhY2VTaGlwIiwiZSIsIkVycm9yIiwiY29uc29sZSIsImVycm9yIiwiY2hlY2tlZENvb3JkIiwibmFpdmVDb29yIiwicmVzdWx0IiwibmV3WCIsInB1c2giLCJuZXdZIiwiYWxsb3dlZCIsImZvckVhY2giLCJjb29yZGluYXRlIiwiYW5YIiwiYW5ZIiwiY2hlY2tGb3JPdmVybGFwIiwiY2hlY2tDb29yZCIsInNoaXBPQkpJbmRleCIsImluZGV4IiwibmV3U2hpcEluZGV4IiwiYUNvb3JkaW5hdGUiLCJuZXd4IiwibmV3eSIsIm1pc3NlZFNob3RzIiwicmVjZWl2ZUF0dGFjayIsImFsbFNoaXBzU3VuayIsImNvdW50ZXIiLCJnZXRCb3hET00iLCJhcmVhIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicmVuZGVyRXhpc3RpbmdCb2F0cyIsInBsYXllckFyZWFET00iLCJ1cGRhdGVFYWNoRE9NQ29vcmRpbmF0ZSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiYVNoaXAiLCJnZXRYYW5kWSIsInRhcmdldCIsImRhdGFzZXQiLCJwYXJlbnRFbGVtZW50IiwiY2hhbmdlQWxsQm94ZXNPZlNoaXAiLCJzaGlwSW5kZXgiLCJhcmVhQ2xhc3MiLCJhQ29vcmQiLCJzaGlwWCIsInNoaXBZIiwiZ2V0Qm94RE9Nc1NoaXBJbmRleCIsImNoYW5nZUJveENvbG91ciIsImNvbG91ciIsInRvZ2dsZUhvdmVyaW5nIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwicGxheWVyR2FtZWJvYXJkIiwiZW5lbXlHYW1lYm9hcmQiLCJnYW1lYm9hcmQxIiwiZ2FtZWJvYXJkMiIsImdhbWVPSyIsIlVJY29udHJvbGxlciIsImhhbmRsZVBsYXllckNsaWNrIiwiYm94RG9tIiwicm12RXZlbnRMaXN0ZW5lckFuZEVuZW15VHVybiIsInNoaXBPQkoiLCJhbGVydCIsImVuZW15VHVybiIsInBsYXllcnNUdXJuIiwicXVlcnlTZWxlY3RvckFsbCIsImFCb3giLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJlbmVteUJvdCIsImh1bWFuQm9hcmQiLCJtb3Zlc0RvbmUiLCJsb2ciLCJnZXRSYW5kb21Db29yZCIsInVuZGVmaW5lZCIsImZpbmQiLCJlbGVtZW50IiwiYXR0YWNrIiwiaXNIaXQiLCJlbmVteVBsYXllciIsImJveERPTSIsImVuZW15U2hpcEluZGV4IiwiZ2FtZUxvb3AiXSwic291cmNlUm9vdCI6IiJ9