(()=>{"use strict";function e(e){let t=0;const r=e;return{isSunk:()=>t>=r,hit:()=>{t+=1},_length:r,placed:!1,coordinates:void 0}}function t(){const t=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],r=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],o=[],n=e=>{let t=0;return(r=>{for(let r=0;r<o.length;r++)o[r]===e&&t++})(),t<{1:4,2:3,3:2,4:1}[e]},a=[];return{placeShip:(e,a,c,l)=>{if(a<0||c<0||a>10||c>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let i;if((()=>{const r=(()=>{const t=[];if(l){if(l){let r=a;for(let o=0;o<e;o++)if(t.push([r,c]),r++,r>10)throw new Error("Boat out of game!")}}else{let r=c;for(let o=0;o<e;o++)if(t.push([a,r]),r++,r>10)throw new Error("boat out of game!")}return t})();return!!(()=>{let e=!0;return r.forEach((r=>{const o=r[0],n=r[1];0!==t[n][o]&&(e=!1)})),e})()&&(console.log("The naive coord",e,r),i=[...r],!0)})()&&n(e)){const n=(e=>{let t;for(let o=0;o<=10;o++)if(null!=r[o]&&r[o]._length===e&&!1===r[o].placed){t=o;break}return t})(e);r[n].placed=!0,o.push(e),r[n].coordinates=i,i.forEach((e=>{const r=e[0],o=e[1];t[o][r]=n}))}},gameArena:t,receiveAttack:(e,o)=>{if(0!==t[o][e]){const n=t[o][e];r[n].hit()}else a.push([e,o])},allShipsSunk:()=>{let e=0;for(let t=1;t<11;t++)r[t].isSunk()&&e++;return e>=10},missedShots:a,currentShipsOBJ:r}}const r=function(){const e=(e,t,r)=>document.querySelector(`.${e} .row[data-x="${t}"] .box[data-y="${r}"]`);return{renderExistingBoats:(t,r)=>{const o=([t,o])=>{e(r,t,o).style.backgroundColor="grey"};t.currentShipsOBJ.forEach((e=>{null==e||e.coordinates.forEach(o)}))},getBoxDOM:e,enemyBoxDOMListener:e=>{document.querySelectorAll(".enemyArea .row .box").forEach((t=>{t.addEventListener("click",(t=>{if(!0!==t.target.dataset.hit){const[r,o]=(e=>{const{y:t}=e.target.dataset,{x:r}=e.target.parentElement.dataset;return[r,t]})(t);t.target.dataset.hit="true",e.receiveAttack(r,o),console.log("the x and Y",r,o)}}))}))}}}();console.log("test"),console.log("change"),(()=>{const e=t(),o=t();var n,a;a=o,(n=e).placeShip(4,0,0,!0),n.placeShip(3,6,0,!0),n.placeShip(3,0,1,!0),n.placeShip(2,0,3,!0),n.placeShip(2,0,5,!0),n.placeShip(2,9,6,!1),n.placeShip(1,2,7,!0),n.placeShip(1,3,8,!0),n.placeShip(1,4,9,!0),n.placeShip(1,7,9,!0),a.placeShip(4,0,0,!0),a.placeShip(3,6,0,!0),a.placeShip(3,0,1,!0),a.placeShip(2,0,3,!0),a.placeShip(2,0,5,!0),a.placeShip(2,9,6,!1),a.placeShip(1,2,7,!0),a.placeShip(1,3,8,!0),a.placeShip(1,4,9,!0),a.placeShip(1,7,9,!0),r.renderExistingBoats(e,"playerArea"),r.enemyBoxDOMListener(o)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,