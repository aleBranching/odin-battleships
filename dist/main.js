(()=>{"use strict";function e(e){let o=0;const t=e;return{isSunk:()=>o>=t,hit:()=>{o+=1},_length:t,placed:!1,coordinates:void 0}}function o(){const o=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],t=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],r=[],n=e=>{let o=0;return(t=>{for(let t=0;t<r.length;t++)r[t]===e&&o++})(),o<{1:4,2:3,3:2,4:1}[e]},c=[];return{placeShip:(e,c,a,l)=>{if(c<0||a<0||c>10||a>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let s;if((()=>{const t=(()=>{const o=[];if(l){if(l){let t=c;for(let r=0;r<e;r++)if(o.push([t,a]),t++,t>10)throw new Error("Boat out of game!")}}else{let t=a;for(let r=0;r<e;r++)if(o.push([c,t]),t++,t>10)throw new Error("boat out of game!")}return o})();return!!(()=>{let e=!0;return t.forEach((t=>{const r=t[0],n=t[1];0!==o[n][r]&&(e=!1)})),e})()&&(s=[...t],!0)})()&&n(e)){const n=(e=>{let o;for(let r=0;r<=10;r++)if(null!=t[r]&&t[r]._length===e&&!1===t[r].placed){o=r;break}return o})(e);t[n].placed=!0,r.push(e),t[n].coordinates=s,s.forEach((e=>{const t=e[0],r=e[1];o[r][t]=n}))}},gameArena:o,receiveAttack:(e,r)=>{if(0!==o[r][e]){const n=o[r][e];return t[n].hit(),!0}return c.push([e,r]),!1},allShipsSunk:()=>{let e=0;for(let o=1;o<11;o++)t[o].isSunk()&&e++;return e>=10},missedShots:c,currentShipsOBJ:t}}const t=function(){const e=(e,o,t)=>document.querySelector(`.${e} .row[data-x="${o}"] .box[data-y="${t}"]`);return{renderExistingBoats:(o,t)=>{const r=([o,r])=>{e(t,o,r).style.backgroundColor="grey"};o.currentShipsOBJ.forEach((e=>{null==e||e.coordinates.forEach(r)}))},getBoxDOM:e,getXandY:e=>{const{y:o}=e.target.dataset,{x:t}=e.target.parentElement.dataset;return[t,o]},changeAllBoxesOfShip:(o,t,r)=>{const{coordinates:n}=r.currentShipsOBJ[o];n.forEach((o=>{const[r,n]=o;e(`${t}`,r,n).style.backgroundColor="red"}))},getBoxDOMsShipIndex:(e,o,t)=>e.gameArena[t][o],changeBoxColour:(o,t,r,n)=>{e(o,t,r).style.backgroundColor=n},toggleHovering:()=>{document.querySelector(".enemyArea").classList.toggle("hovering")}}}();console.log("test"),console.log("change"),(()=>{const e=o(),r=o();var n,c;c=r,(n=e).placeShip(4,0,0,!0),n.placeShip(3,6,0,!0),n.placeShip(3,0,1,!0),n.placeShip(2,0,3,!0),n.placeShip(2,0,5,!0),n.placeShip(2,9,6,!1),n.placeShip(1,2,7,!0),n.placeShip(1,3,8,!0),n.placeShip(1,4,9,!0),n.placeShip(1,7,9,!0),c.placeShip(4,0,0,!0),c.placeShip(3,6,0,!0),c.placeShip(3,0,1,!0),c.placeShip(2,0,3,!0),c.placeShip(2,0,5,!0),c.placeShip(2,9,6,!1),c.placeShip(1,2,7,!0),c.placeShip(1,3,8,!0),c.placeShip(1,4,9,!0),c.placeShip(1,7,9,!0);let a=!0;t.renderExistingBoats(e,"playerArea");const l=e=>{const o=e.target,[n,c]=t.getXandY(e),l=t.getBoxDOMsShipIndex(r,n,c);if(console.log("evaluating",o.dataset.hit),!o.dataset.hit){o.dataset.hit=!0,i();const e=r.receiveAttack(n,c);if(console.log("attackResult",e),e){const e=r.currentShipsOBJ[l];o.style.backgroundColor="grey",e.isSunk()&&t.changeAllBoxesOfShip(l,"enemyArea",r),r.allShipsSunk()&&(alert("game Over"),a=!1)}else o.style.backgroundColor="rgb(190, 146, 154)";h()}console.log(l)},s=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.addEventListener("click",l,{once:!0})}))},i=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.removeEventListener("click",l)})),t.toggleHovering()},h=()=>{if(!a)return;const o=function(e){const o=[],t=()=>{const e=Math.floor(9*Math.random()),r=Math.floor(9*Math.random());return o.includes([e,r])&&t(),[e,r]};return{attack:()=>{const[r,n]=t();console.log("random coord",r,n);const c=e.receiveAttack(r,n);return o.push([r,n]),[c,r,n]},movesDone:o}}(e),[r,n,c]=o.attack(),l=t.getBoxDOM("playerArea",n,c);if(r){const o=t.getBoxDOMsShipIndex(e,n,c),r=e.currentShipsOBJ[o];l.style.backgroundColor="pink",s(),r.isSunk()&&t.changeAllBoxesOfShip(o,"playerArea",e)}else console.log(l),l.style.backgroundColor="rgb(190, 146, 154)",s()};s()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,