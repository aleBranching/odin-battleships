(()=>{"use strict";function e(e){let o=0;const t=e;return{isSunk:()=>o>=t,hit:()=>{o+=1},_length:t,placed:!1,coordinates:void 0}}function o(){const o=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],t=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],r=[],n=e=>{let o=0;return(t=>{for(let t=0;t<r.length;t++)r[t]===e&&o++})(),o<{1:4,2:3,3:2,4:1}[e]},a=e=>{const[o,t]=[Math.floor(10*Math.random()),Math.floor(10*Math.random())],r=1===Math.floor(2*Math.random());try{l(e,o,t,r)}catch(o){return a(e)}},l=(e,a,l,c)=>{if(a<0||l<0||a>10||l>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let s;if(!(()=>{const t=(()=>{const o=[];if(c){if(c){let t=a;for(let r=0;r<e;r++)if(o.push([t,l]),t++,t>10)throw new Error("Boat out of game!")}}else{let t=l;for(let r=0;r<e;r++)if(o.push([a,t]),t++,t>10)throw new Error("boat out of game!")}return o})();return!!(()=>{let e=!0;return t.forEach((t=>{const r=t[0],n=t[1];0!==o[n][r]&&(e=!1)})),e})()&&(s=[...t],!0)})()||!n(e))throw new Error("most likely ship is overlaping");{const n=(e=>{let o;for(let r=0;r<=10;r++)if(null!=t[r]&&t[r]._length===e&&!1===t[r].placed){o=r;break}return o})(e);t[n].placed=!0,r.push(e),t[n].coordinates=s,s.forEach((e=>{const t=e[0],r=e[1];o[r][t]=n}))}},c=[];return console.log("test"),{placeShip:l,gameArena:o,receiveAttack:(e,r)=>{if(0!==o[r][e]){const n=o[r][e];return t[n].hit(),!0}return c.push([e,r]),!1},allShipsSunk:()=>{let e=0;for(let o=1;o<11;o++)t[o].isSunk()&&e++;return e>=10},missedShots:c,currentShipsOBJ:t,placeShipRandomly:a}}const t=function(){const e=(e,o,t)=>document.querySelector(`.${e} .row[data-x="${o}"] .box[data-y="${t}"]`);return{renderExistingBoats:(o,t)=>{const r=([o,r])=>{e(t,o,r).style.backgroundColor="grey"};o.currentShipsOBJ.forEach((e=>{null==e||e.coordinates.forEach(r)}))},getBoxDOM:e,getXandY:e=>{const{y:o}=e.target.dataset,{x:t}=e.target.parentElement.dataset;return[t,o]},changeAllBoxesOfShip:(o,t,r)=>{const{coordinates:n}=r.currentShipsOBJ[o];n.forEach((o=>{const[r,n]=o;e(`${t}`,r,n).style.backgroundColor="red"}))},getBoxDOMsShipIndex:(e,o,t)=>e.gameArena[t][o],changeBoxColour:(o,t,r,n)=>{e(o,t,r).style.backgroundColor=n},toggleHovering:()=>{document.querySelector(".enemyArea").classList.toggle("hovering")}}}();(()=>{const e=o(),r=o();var n,a;a=r,(n=e).placeShipRandomly(4),n.placeShipRandomly(3),n.placeShipRandomly(3),n.placeShipRandomly(2),n.placeShipRandomly(2),n.placeShipRandomly(2),n.placeShipRandomly(1),n.placeShipRandomly(1),n.placeShipRandomly(1),n.placeShipRandomly(1),a.placeShipRandomly(4),a.placeShipRandomly(3),a.placeShipRandomly(3),a.placeShipRandomly(2),a.placeShipRandomly(2),a.placeShipRandomly(2),a.placeShipRandomly(1),a.placeShipRandomly(1),a.placeShipRandomly(1),a.placeShipRandomly(1);let l=!0;t.renderExistingBoats(e,"playerArea");const c=e=>{const o=e.target,[n,a]=t.getXandY(e),c=t.getBoxDOMsShipIndex(r,n,a);if(!o.dataset.hit){if(o.dataset.hit=!0,i(),r.receiveAttack(n,a)){const e=r.currentShipsOBJ[c];o.style.backgroundColor="grey",e.isSunk()&&t.changeAllBoxesOfShip(c,"enemyArea",r),r.allShipsSunk()&&(alert("game Over"),l=!1)}else o.style.backgroundColor="rgb(201, 201, 178)";p()}},s=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.addEventListener("click",c,{once:!0})}))},i=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.removeEventListener("click",c)})),t.toggleHovering()},h=function(e){const o=[];console.log(o);const t=()=>{const e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());return void 0!==o.find((o=>o[0]===e&&o[1]===r))?t():[e,r]};return{attack:()=>{const[r,n]=t();console.log("random coord",r,n);const a=e.receiveAttack(r,n);return o.push([r,n]),[a,r,n]}}}(e),p=()=>{if(!l)return;const[o,r,n]=h.attack(),a=t.getBoxDOM("playerArea",r,n);if(o){const o=t.getBoxDOMsShipIndex(e,r,n),l=e.currentShipsOBJ[o];a.style.backgroundColor="pink",s(),l.isSunk()&&t.changeAllBoxesOfShip(o,"playerArea",e)}else a.style.backgroundColor="rgb(201, 201, 178)",s()};s()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,