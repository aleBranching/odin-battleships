(()=>{"use strict";function e(e){let o=0;const t=e;return{isSunk:()=>o>=t,hit:()=>{o+=1},_length:t,placed:!1,coordinates:void 0}}function o(){const o=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],t=[null,e(4),e(3),e(3),e(2),e(2),e(2),e(1),e(1),e(1),e(1)],r=[],n=e=>{let o=0;return(t=>{for(let t=0;t<r.length;t++)r[t]===e&&o++})(),o<{1:4,2:3,3:2,4:1}[e]},l=()=>[Math.floor(10*Math.random()),Math.floor(10*Math.random())],a=()=>1===Math.floor(2*Math.random()),s=e=>{const[o,t]=l(),r=a();try{c(e,o,t,r)}catch(o){return s(e)}},c=(e,l,a,s)=>{if(l<0||a<0||l>10||a>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));if(!n)throw new Error((e=>{console.error("can't put anymore of these ships")}));let c;if(!(()=>{const t=(()=>{const o=[];if(s){if(s){let t=l;for(let r=0;r<e;r++)if(o.push([t,a]),t++,t>10)throw new Error("Boat out of game!")}}else{let t=a;for(let r=0;r<e;r++)if(o.push([l,t]),t++,t>10)throw new Error("boat out of game!")}return o})();return!!(()=>{let e=!0;return t.forEach((t=>{const r=t[0],n=t[1];0!==o[n][r]&&(e=!1)})),e})()&&(c=[...t],!0)})()||!n(e))throw new Error("most likely ship is overlaping");{const n=(e=>{let o;for(let r=0;r<=10;r++)if(null!=t[r]&&t[r]._length===e&&!1===t[r].placed){o=r;break}return o})(e);t[n].placed=!0,r.push(e),t[n].coordinates=c,c.forEach((e=>{const t=e[0],r=e[1];o[r][t]=n}))}},i=[];return{placeShip:c,gameArena:o,receiveAttack:(e,r)=>{if(0!==o[r][e]){const n=o[r][e];return t[n].hit(),!0}return i.push([e,r]),!1},allShipsSunk:()=>{let e=0;for(let o=1;o<11;o++)t[o].isSunk()&&e++;return e>=10},missedShots:i,currentShipsOBJ:t,placeShipRandomly:s,positionAllShipsRandomlyTemplate:()=>{const e=[],o=[[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0]],t=[4,3,3,2,2,2,1,1,1,1];let r=-1;const n=()=>{try{const[s,c]=l(),i=a();return r+=1,10===r?void 0:(e.push(((e,o,t,r,n)=>{if(t<0||r<0||t>10||r>10)throw new Error((e=>{console.error("can't place ship here or no more of these ships or ship too big")}));let l;if((()=>{const a=(()=>{const e=[];if(n){if(n){let n=t;for(let t=0;t<o;t++)if(e.push([n,r]),n++,n>10)throw new Error("Boat out of game!")}}else{let n=r;for(let r=0;r<o;r++)if(e.push([t,n]),n++,n>10)throw new Error("boat out of game!")}return e})();return!!(()=>{let o=!0;return a.forEach((t=>{const r=t[0],n=t[1];0!==e[n][r]&&(o=!1)})),o})()&&(l=[...a],!0)})())return l.forEach((o=>{const t=o[0],r=o[1];e[r][t]=1})),{x:l[0][0],y:l[0][1],length:o,horizontally:n};throw new Error("most likely ship is overlaping")})(o,t[r],s,c,i)),n())}catch(e){return r-=1,n()}};return n(),[e,o]}}}const t=function(){const e=(e,o,t)=>document.querySelector(`.${e} .row[data-y="${t}"] .box[data-x="${o}"]`);return{renderExistingBoats:(o,t)=>{const r=([o,r])=>{e(t,o,r).style.backgroundColor="grey"};o.currentShipsOBJ.forEach((e=>{null==e||e.coordinates.forEach(r)}))},getBoxDOM:e,getXandY:e=>{const{x:o}=e.target.dataset,{y:t}=e.target.parentElement.dataset;return[o,t]},changeAllBoxesOfShip:(o,t,r)=>{const{coordinates:n}=r.currentShipsOBJ[o];n.forEach((o=>{const[r,n]=o;e(`${t}`,r,n).style.backgroundColor="red"}))},getBoxDOMsShipIndex:(e,o,t)=>e.gameArena[t][o],changeBoxColour:(o,t,r,n)=>{e(o,t,r).style.backgroundColor=n},toggleHovering:()=>{document.querySelector(".enemyArea").classList.toggle("hovering")},renderTemplateBoats:o=>{o.forEach(((t,r)=>{t.forEach(((t,n)=>{1===o[r][n]&&(e("positionArea",n,r).style.backgroundColor="grey")}))}))},resetTemplateColours:()=>{const o=(o,t)=>{e("positionArea",o,t).style.backgroundColor="white"};for(let e=0;e<10;e++)for(let t=0;t<10;t++)o(e,t)}}}(),r=document.querySelector("#randomise"),n=document.querySelector("#submit"),l=document.querySelector("#templateDialog");let a,s=[];r.addEventListener("click",(()=>{t.resetTemplateColours();const e=o(),[r,n]=e.positionAllShipsRandomlyTemplate();a=n,s=r,console.log("the positions",r),console.table(n),t.renderTemplateBoats(n)})),n.addEventListener("click",(()=>{l.close(),c(s)}));const c=()=>{const e=o(),r=o();((e,o)=>{for(let o=0;o<10;o++)e.placeShip(s[o].length,s[o].x,s[o].y,s[o].horizontally);console.table(e.gameArena),console.table(a);for(let e=0;e<10;e++)o.placeShip(s[e].length,s[e].x,s[e].y,s[e].horizontally);console.log("enemyBoard"),console.table(o.gameArena),console.log("object of 4 coord",o.currentShipsOBJ[1].coordinates)})(e,r);let n=!0;t.renderExistingBoats(e,"playerArea");const l=e=>{const o=e.target,[l,a]=t.getXandY(e),s=t.getBoxDOMsShipIndex(r,l,a);if(!o.dataset.hit){if(o.dataset.hit=!0,i(),r.receiveAttack(l,a)){const e=r.currentShipsOBJ[s];o.style.backgroundColor="grey",e.isSunk()&&t.changeAllBoxesOfShip(s,"enemyArea",r),r.allShipsSunk()&&(alert("game Over"),n=!1)}else o.style.backgroundColor="rgb(201, 201, 178)";u()}},c=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.addEventListener("click",l,{once:!0})}))},i=()=>{document.querySelectorAll(".enemyArea .row .box").forEach((e=>{e.removeEventListener("click",l)})),t.toggleHovering()},h=function(e){const o=[],t=()=>{const e=Math.floor(10*Math.random()),r=Math.floor(10*Math.random());return void 0!==o.find((o=>o[0]===e&&o[1]===r))?t():[e,r]};return{attack:()=>{const[r,n]=t(),l=e.receiveAttack(r,n);return o.push([r,n]),[l,r,n]}}}(e),u=()=>{if(!n)return;const[o,r,l]=h.attack(),a=t.getBoxDOM("playerArea",r,l);if(o){const o=t.getBoxDOMsShipIndex(e,r,l),n=e.currentShipsOBJ[o];a.style.backgroundColor="pink",c(),n.isSunk()&&t.changeAllBoxesOfShip(o,"playerArea",e)}else a.style.backgroundColor="rgb(201, 201, 178)",c()};c()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,